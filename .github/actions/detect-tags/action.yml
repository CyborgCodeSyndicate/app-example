name: Detect Codebase Changes

description: Emits a test tags when codebase changes are detected

inputs:
  before:
    description: Git SHA before the change
    required: true
  after:
    description: Git SHA after the change
    required: true
  filters:
    description: YAML mapping or path to a filters file (keys = tags)
    required: true

outputs:
  tags:
    description: Comma-separated tags to include
    value: ${{ steps.set.outputs.tags }}
  matched:
    description: "true if at least one filter matched, else false"
    value: ${{ steps.set.outputs.matched }}

runs:
  using: "composite"
  steps:
    - name: Compute base (handles empty 'before' & first-commit case)
      id: base
      shell: bash
      run: |
        set -euo pipefail
        BEFORE='${{ inputs.before }}'
        AFTER='${{ inputs.after }}'

        if [ -z "$BEFORE" ]; then
          if git rev-parse "${AFTER}^" >/dev/null 2>&1; then
            BEFORE=$(git rev-parse "${AFTER}^")
            echo "ℹ️ 'before' empty → using parent of AFTER: $BEFORE"
          else
            BEFORE=$(git hash-object -t tree /dev/null)  # empty tree for first commit
            echo "ℹ️ No parent for AFTER → using empty tree: $BEFORE"
          fi
        fi

        echo "base=$BEFORE" >> "$GITHUB_OUTPUT"
        echo "after=$AFTER" >> "$GITHUB_OUTPUT"

    # --- Main: path filtering ------------------------------------------------
    - name: Run paths-filter
      id: filter
      uses: dorny/paths-filter@v3
      with:
        base: ${{ steps.base.outputs.base }}
        ref:  ${{ steps.base.outputs.after }}
        filters: ${{ inputs.filters }}

    # --- Post-process & output ----------------------------------------------
    - name: Build tag list and expose outputs
      id: set
      shell: bash
      run: |
        set -euo pipefail

        RAW='${{ steps.filter.outputs.changes }}'   # JSON array of filter names (our tags)
        echo "changes: $RAW"

        TAGS="$(printf '%s' "$RAW" | jq -r 'select(type=="array") | unique | join(",")')"

        # Guards & logs
        if [ -z "${TAGS:-}" ]; then
          echo "❌ No filters matched; no tags will be emitted."
          MATCHED=false
        else
          echo "✅ Detected tags: $TAGS"
          MATCHED=true
        fi

        echo "tags=$TAGS" >> "$GITHUB_OUTPUT"
        echo "matched=$MATCHED" >> "$GITHUB_OUTPUT"